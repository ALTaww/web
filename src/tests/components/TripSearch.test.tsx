// Generated by Qodo Gen

import { act } from "react";
import TripSearch from "../../components/TripSearch";
import tripStore from "../../store/tripStore";

describe("TripSearch", () => {
  // Search trip with valid from/to locations and date triggers navigation
  it("should navigate to search results when valid locations and date are provided", () => {
    const navigate = jest.fn();
    jest
      .spyOn(require("react-router-dom"), "useNavigate")
      .mockReturnValue(navigate);

    const { getByRole } = render(<TripSearch nosuggestions={false} />);

    tripStore.setFromLat(51.5074);
    tripStore.setFromLon(-0.1278);
    tripStore.setToLat(48.8566);
    tripStore.setToLon(2.3522);
    tripStore.setWhen("2024-01-01");

    fireEvent.click(getByRole("button", { name: /найти/i }));

    expect(navigate).toHaveBeenCalledWith(
      expect.stringContaining("/searchresults?from="),
      expect.any(Object)
    );
  });

  // Entering location text fetches suggestions after 2+ characters
  it("should fetch location suggestions when input length exceeds 2 characters", async () => {
    const mockSuggestions = [
      { value: "Moscow", data: { geo_lat: 55.7558, geo_lon: 37.6173 } },
    ];
    jest
      .spyOn(suggestionsApi, "getSettlements")
      .mockResolvedValue(mockSuggestions);

    const { getByLabelText } = render(<TripSearch nosuggestions={false} />);

    const fromInput = getByLabelText(/введите начальный пункт/i);
    await act(async () => {
      fireEvent.change(fromInput, { target: { value: "Mos" } });
    });

    await waitFor(() => {
      expect(suggestionsApi.getSettlements).toHaveBeenCalledWith(
        "Mos",
        expect.any(AbortSignal)
      );
    });
  });

  // Search with missing or invalid coordinates shows error notification
  it("should show error notification when coordinates are missing", () => {
    const mockShowNotification = jest.spyOn(
      require("../utils/helpers"),
      "showNotification"
    );

    const { getByRole } = render(<TripSearch nosuggestions={false} />);

    tripStore.setFromLat(null);
    tripStore.setFromLon(null);
    tripStore.setWhen("2024-01-01");

    fireEvent.click(getByRole("button", { name: /найти/i }));

    expect(mockShowNotification).toHaveBeenCalledWith(
      expect.any(String),
      expect.any(Number),
      "error"
    );
  });

  // Search with invalid date format shows error notification
  it("should show error notification when date format is invalid", () => {
    const mockShowNotification = jest.spyOn(
      require("../utils/helpers"),
      "showNotification"
    );

    const { getByRole } = render(<TripSearch nosuggestions={false} />);

    tripStore.setFromLat(51.5074);
    tripStore.setFromLon(-0.1278);
    tripStore.setToLat(48.8566);
    tripStore.setToLon(2.3522);
    tripStore.setWhen("invalid-date");

    fireEvent.click(getByRole("button", { name: /найти/i }));

    expect(mockShowNotification).toHaveBeenCalledWith(
      expect.any(String),
      expect.any(Number),
      "error"
    );
  });

  // Empty or single character input should not trigger suggestions API call
  it("should not fetch suggestions for single character input", async () => {
    const mockGetSettlements = jest.spyOn(suggestionsApi, "getSettlements");

    const { getByLabelText } = render(<TripSearch nosuggestions={false} />);

    const fromInput = getByLabelText(/введите начальный пункт/i);
    await act(async () => {
      fireEvent.change(fromInput, { target: { value: "M" } });
    });

    await waitFor(() => {
      expect(mockGetSettlements).not.toHaveBeenCalled();
    });
  });
});
